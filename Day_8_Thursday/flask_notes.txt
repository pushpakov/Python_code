                                                            FLASK

Flask is a lightweight web application framework written in Python. It is designed to be simple and easy to use, yet powerful enough to build complex web applications. Flask is considered a micro-framework, meaning that it is focused on providing the minimum set of tools and features needed to build a web application.

Flask is based on the WSGI (Web Server Gateway Interface) standard, which allows it to work with a wide range of web servers and platforms. It provides a simple and intuitive API for routing HTTP requests to view functions, rendering templates, managing sessions and cookies, handling errors, and more.

One of the key features of Flask is its flexibility and extensibility. It allows developers to add and remove components as needed, and to integrate with other Python libraries and tools. Flask also provides built-in support for testing, debugging, and profiling, which makes it easy to develop and deploy web applications.

Flask is often used for building small to medium-sized web applications, such as blogs, forums, content management systems, and RESTful APIs. It is popular among Python developers because of its simplicity, ease of use, and flexibility.


## email error to admin 
to be proactive about discovering ans fixing bugs, we can configure a logging.handlers.SMTPHandler to send an email when errors and higher are logged

## Jinja2 is a web template engine which combines a template with a certain data source to render the dynamic web pages.

## app.run(host, port, debug, options)  

##The add_url_rule() function
        There is one more approach to perform routing for the flask web application that can be done by using the add_url() function of the Flask class. The syntax to use this function is given below.
        add_url_rule(<url rule>, <endpoint>, <view function>)  
        This function is mainly used in the case if the view function is not given and we need to connect a view function to an endpoint externally by using this function.


##Benefits of the Dynamic URL Building
        It avoids hard coding of the URLs.
        We can change the URLs dynamically instead of remembering the manually changed hard-coded URLs.
        URL building handles the escaping of special characters and Unicode data transparently.
        The generated paths are always absolute, avoiding unexpected behavior of relative paths in browsers.
        If your application is placed outside the URL root, for example, in /myapplication instead of /, url_for() properly handles that for you.


## 